openapi: 3.0.3
info:
  version: 2.0.0
  title: IFB398 - Capstone Project 2023
  description: >-
    This API has been created to support Capstone Project in IFB398, Capstone
    Unit. It exposes a number of REST endpoints. The API endpoints and their
    usage are described in detail below.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Enter JWT Bearer token **_only_**
paths:
# AboutUs
  /api/about:
    get:
      tags:
        - Administration
      description: A route to know more about the project team.
      responses:
        '200':
          description: An object containing information about the project.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Project Team Name
                  description:
                    type: string
                    example: Project Team Description
                  company:
                    type: string
                    example: Company Name
                  members:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Member Name
                        student_id:
                          type: string
                          example: Member Student ID
                        email:
                          type: string
                          example: Member Email





# Authentication
  /api/user/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '201':
          description: User created successfully
        '400':
          description: 'Request body incomplete, all fields are required'
        '409':
          description: User already exists
  /api/user/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token_type:
                    type: string
                  token:
                    type: string
                  expires_in:
                    type: integer
        '400':
          description: 'Request body incomplete, email and password are required'
        '401':
          description: Incorrect credentials
  api/user:
    get:
      tags:
        - Authentication
      summary: Get user's information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful retrieval of user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  email:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
        '400':
          description: Invalid token
        '404':
          description: User not found
    put:
      tags:
        - Authentication
      summary: Update user's information
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '400':
          description: 'Request body incomplete, some fields are required'
        '404':
          description: User not found
    delete:
      tags:
        - Authentication
      summary: Delete a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Invalid token
        '404':
          description: User not found
  api/user/forgot-password:
    post:
      tags:
        - Authentication
      summary: Handle user's forgot password request (Not functional yet)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '400':
          description: 'Request body incomplete, email is required'
        '404':
          description: User not found
  
  
  
  
  
  # Enrolment. Please change route names to be consistant
  /api/enrolment/course/register:
    post:
      tags:
        - Enrolment (To be changed)
      summary: Register a user to a course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: User's unique identifier
                  example: 6
                course_id:
                  type: integer
                  description: Course's unique identifier
                  example: 1
      responses:
        '200':
          description: User successfully registered to the course
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User with ID 1 has been registered to course ID 101
        '400':
          description: Bad request, such as user already registered to the course
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User is already registered to this course.
  /api/enrolment/lectures/attended:
    post:
      tags:
        - Enrolment (To be changed)
      summary: Mark a lecture as attended for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: User's unique identifier
                  example: 6
                course_id:
                  type: integer
                  description: Course's unique identifier
                  example: 1
                lecture_id:
                  type: integer
                  description: Lecture's unique identifier
                  example: 1
      responses:
        '200':
          description: Lecture marked as attended successfully or course completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lecture with ID 303 has been marked as attended for user ID 1 in course ID 101
        '400':
          description: Bad request, such as lecture already attended by the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Lecture already attended by the user for this course.
        '404':
          description: User or course not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User is not registered for this course.
  /api/enrolment/materials/viewed:
    post:
      tags:
        - Enrolment (To be changed)
      summary: Mark a material as viewed for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: User's unique identifier
                  example: 6
                course_id:
                  type: integer
                  description: Course's unique identifier
                  example: 1
                material_id:
                  type: integer
                  description: Material's unique identifier
                  example: 1
      responses:
        '200':
          description: Material marked as viewed successfully or course completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Material with ID 202 has been marked as viewed for user ID 1 in course ID 101
        '400':
          description: Bad request, such as user already viewed the material
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Material already viewed by the user for this course.
        '404':
          description: User or course or material not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User or course or material not found.
  /api/enrolment/quizzes/attempted:
    post:
      tags:
        - Enrolment (To be changed)
      summary: Mark a quiz as attempted for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: User's unique identifier
                  example: 6
                course_id:
                  type: integer
                  description: Course's unique identifier
                  example: 1
                quiz_id:
                  type: integer
                  description: Quiz's unique identifier
                  example: 1
      responses:
        '200':
          description: Quiz marked as attempted successfully or course completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Quiz with ID 404 has been marked as attempted for user ID 1 in course ID 101
        '400':
          description: Bad request, such as quiz already attempted by the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Quiz already attempted by the user for this course.
        '404':
          description: User or course not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User is not registered for this course.





  # Quiz To be changed
  /api/learningModules/{courseID}/quiz:
    get:
      tags:
        - Quiz
      summary: Get quiz by course ID and quiz ID
      parameters:
        - name: courseID
          in: path
          description: ID of the course
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: ID of the quiz
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/learningModules/course/add/quiz:
    post:
      tags:
        - Quiz
      description: Add new quiz information to a course
      requestBody:
        description: An object containing the course ID, quiz description and maximum tries of doing the quiz.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                  example: 1
                description:
                  type: string
                  example: A quiz will be more intended for technical understanding.
                max_tries:
                  type: integer
                  example: 5
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/learningModules/course/quiz/question:
    post:
      tags:
        - Quiz
      description: Add new quiz question to a quiz
      requestBody:
        description: An object containing the course ID, quiz ID, question text, and all answer options
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                  example: 1
                quiz_id:
                  type: integer
                  example: 1
                question_text:
                  type: string
                  example: Which of the following are fruits?
                question_answers:
                  type: array
                  items:
                    type: string
                  example:
                    - A
                    - C
                question_answer_options:
                  type: object
                  properties:
                    A:
                      type: string
                      example: Apple
                    B:
                      type: string
                      example: Carrot
                    C:
                      type: string
                      example: Banana
                    D:
                      type: string
                      example: Lettuce
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/learningModules/course/update/quiz:
    post:
      tags:
        - Quiz
      description: Add new quiz information to a course
      requestBody:
        description: An object containing the course ID, quiz description and maximum tries of doing the quiz.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                  example: 1
                quiz_id:
                  type: integer
                  example: 1
                description:
                  type: string
                  example: A quiz will be more intended for technical understanding.
                max_tries:
                  type: integer
                  example: 5
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/learningModules/course/update/quiz/question:
    post:
      tags:
        - Quiz
      description: Update quiz question in a quiz
      requestBody:
        description: An object containing the course ID, quiz ID, question number, question text, and all answer options
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                  example: 1
                quiz_id:
                  type: integer
                  example: 1
                question_number:
                  type: integer
                  example: 1
                question_text:
                  type: string
                  example: What is the capital of France?
                question_answers:
                  type: array
                  items:
                    type: string
                  example:
                    - B
                    - C
                question_answer_options:
                  type: object
                  properties:
                    A:
                      type: string
                      example: London
                    B:
                      type: string
                      example: Paris
                    C:
                      type: string
                      example: Berlin
                    D:
                      type: string
                      example: Madrid
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  
  
  
  
  
# Learning modules and course 
  
  /api/learningModules/course:
    get:
      tags:
        - Learning Modules
      summary: ?? is this changed?? Get course by ID
      parameters:
        - name: id
          in: query
          description: ID of the course
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  
  /api/learningModules/course/update:
    post:
      tags:
        - Learning Modules
      summary: To be changed??
      description: update course
      requestBody:
        description: An object containing the course name and category type
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                  example: 1
                course_name:
                  type: string
                  example: C# basic
                category_type:
                  type: string
                  example: basic
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/learningModules/course/update/material:
    post:
      tags:
        - Learning Modules
      summary: To be changed??
      description: update course-material
      requestBody:
        description: ??to be changed?? An object containing the course name and category type
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                  example: 1
                material_id:
                  type: integer
                  example: 1
                material_type:
                  type: string
                  example: COOL
                material_media:
                  type: string
                  example: ASX
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/learningmodules/{courseID}/media:
    get:
      tags:
        - Learning Modules
      summary: ??to be changed?? Retrieve media associated with a specific course.
      security:
        - bearerAuth: []
      parameters:
        - name: courseID
          in: path
          required: true
          description: The ID of the course to retrieve media for.
          schema:
            type: integer
        - name: image
          in: query
          description: Image ID to retrieve.
          schema:
            type: integer
        - name: video
          in: query
          description: Video ID to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: Media file returned successfully.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            video/mp4:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request, missing or incorrect parameters.
          content:
            application/json:
              example:
                error: true
                message: 'Bad request please specify a course ID'
        '404':
          description: Course or media file not found.
          content:
            application/json:
              example:
                error: true
                message: 'Module file not found'


  /api/modules/{courseID}:
    get:
      tags:
        - Learning Moduless (Not sure if this is kept)
      summary: ???Is this going to be changed??? View content of a learning module
      parameters:
        - name: courseID
          in: path
          description: ID of the learning module
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}









# Forum
  /api/forum/create:
    post:
      tags:
        - Forum
      summary: Create a new forum **Needs Fixing**
      description: Endpoint to create a new forum thread. Requires JWT token in the Authorization header.
      security:
        - bearerAuth: []
        
  /api/forum/{forumID}/comment:
    post:
      tags:
        - Forum
      summary: Create a forum comment **Needs fixing**
      description: Endpoint to create a new forum comment. Requires JWT token in the Authorization header.
      security:
        - bearerAuth: []





# Search function
  /api/learningModules/search:
    post:
      tags:
        - Search function
      summary: To be changed??
      description: Search for modules
      requestBody:
        description: An object containing the search queries to be search to. Match modules will appear if found.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                search_query:
                  type: string
                  example: c
      responses:
        '200':
          description: Module search result has been found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted
                  module:
                    type: object
                    properties:
                      course_id:
                        type: integer
                        example: 1
                      course_name:
                        type: string
                        example: C# course
                      category_type:
                        type: string
                        example: basic/intermediate/advance
        '400':
          description: Other URL issue
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: 'true'
                  message:
                    type: string
                    example: Learning modules endpoint is not working
        '404':
          description: Module not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: 'true'
                  message:
                    type: string
                    example: no module with the provided module name has been found
  /api/learningModules/add/tags:
    post:
      tags:
        - Search function
      summary: ??is this changed?? Add new tag to an existing course
      requestBody:
        description: Add a new tag
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                search_query:
                  type: new_tag
                  example: C#
                course_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  
  /api/learningModules/search/tags:
    post:
      tags:
        - Search function
      summary: ??is this changed?? Search course based on the most related tags to the lowest related tags. Not include modules with unrelated tags.
      requestBody:
        description: An object containing the search queries to be search to. Match modules will appear if found.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                search_query:
                  type: string
                  example: C
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
            
  /api/modules:
    get:
      tags:
        - Course (using DB) 
      summary: View all available learning modules
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        security:
          - bearerAuth: []
  /api/modules/course:
    post:
      tags:
        - Course (using DB)
      summary: Add new course
      requestBody:
        description: An object containing the search queries to be search to. Match modules will appear if found.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_name:
                  type: string
                  example: 'Security: Phishing'
                course_lastUpdated:
                  type: datetime
                  example: '2023-09-13 14:30:00'
                category_type:
                  type: string
                  example: security
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/modules/lecture:
    post:
      tags:
        - Course (using DB)
      summary: Add new lecture
      requestBody:
        description: An object containing the search queries to be search to. Match modules will appear if found.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lecture_name:
                  type: string
                  example: week 1
                module_id:
                  type: integer
                  example: 1
                lecture_order:
                  type: integer
                  example: 1
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/modules/lecture/content:
    post:
      tags:
        - Course (using DB)
      summary: Add new lecture content
      requestBody:
        description: An object containing the search queries to be search to. Match modules will appear if found.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lecture_id:
                  type: integer
                  example: 101
                material_id:
                  type: integer
                  example: 101
                material_order:
                  type: integer
                  example: 1
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/modules/material:
    post:
      tags:
        - Course (using DB)
      summary: Add new material
      requestBody:
        description: An object containing the search queries to be search to. Match modules will appear if found.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                material_name:
                  type: string
                  example: file 33
                material_url:
                  type: string
                  example: https://www.fakeURL.com
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/modules/module:
    post:
      tags:
        - Course (using DB)
      summary: Add new material
      requestBody:
        description: An object containing the search queries to be search to. Match modules will appear if found.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                  example: 1
                module_name:
                  type: string
                  example: what is github?
                module_order:
                  type: integer
                  example: 2
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/modules/quiz:
    post:
      tags:
        - Course (using DB)
      summary: Add new quiz
      requestBody:
        description: An object containing the search queries to be search to. Match modules will appear if found.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quiz_name:
                  type: string
                  example: Github - Intro
                quiz_blob_url:
                  type: string
                  example: github.com
                module_id:
                  type: integer
                  example: 1
                quiz_maxtries:
                  type: integer
                  example: 3
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/modules/quiz/questions:
    post:
      tags:
        - Course (using DB)
      summary: Add new quiz question
      requestBody:
        description: An object containing the search queries to be search to. Match modules will appear if found.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_text:
                  type: string
                  example: What is the purpose of Github?
                question_option:
                  type: object
                  properties:
                    A:
                      type: string
                      example: Github is a platform to store git repo.
                    B:
                      type: string
                      example: GitHub is a platform and cloud-based service for software development and version control using Git, allowing developers to store and manage their code.
                    C:
                      type: string
                      example: Both of the options above are correct.
                    D:
                      type: string
                      example: Both of the options above are not correct.
                question_answer:
                  type: string
                  example: B
                quiz_id:
                  type: integer
                  example: 1
                question_order:
                  type: integer
                  example: 1
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}
  /api/modules/delete:
    delete:
      tags:
        - Course (using DB)
      summary: Add new quiz question
      requestBody:
        description: Delete some data with specific condition
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data_type:
                  type: string
                  example: QUESTION_ANSWER
                condition:
                  type: string
                  example: '='
                value:
                  type: string
                  example: B
                table:
                  type: string
                  example: quiz_question
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
        '404':
          description: Not Found
          content:
            application/json: {}

            
            
            
            
            